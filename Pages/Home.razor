@page "/"
@using Biblia.Data
@inject Biblia.Services.ProgressoService ProgressoService

<PageTitle>Leitura da Bíblia</PageTitle>

<div class="container py-3">
  <h3 class="text-center mb-4"><img src="icons/icon-192.png" style="width: 50px"/> Controle de Leitura</h3>
  
  <div class="container text-center" >
    <h6 style="font-size: 85%; padding: 3px; margin: 5px">Use este app para marcar seu progresso na leitura da Bíblia Sagrada. Que Deus te abençoe em sua jornada de leitura e conhecimento da palavra!</h6>  
  </div>

  <!-- Resumos -->
  <div class="row g-3 mb-3">
    <div class="col-12 col-md-4">
      <div class="card card-plain text-center bg-total">
        <div class="card-body">
          <h5 class="card-title">Bíblia inteira</h5>
          <p class="display-6 fw-bold mb-0">@ProgressoBiblia%</p>
          <small>@LidosTotais/@TotalCapitulos capítulos</small>
        </div>
      </div>
    </div>

    <div class="col-6 col-md-4">
      <div class="card card-plain text-center bg-ot">
        <div class="card-body">
          <h5 class="card-title">Velho Testamento</h5>
          <p class="display-6 fw-bold mb-0">@ProgressoVelho%</p>
          <small>@LidosVelho/@TotalVelho capítulos</small>
        </div>
      </div>
    </div>

    <div class="col-6 col-md-4">
      <div class="card card-plain text-center bg-nt">
        <div class="card-body">
          <h5 class="card-title">Novo Testamento</h5>
          <p class="display-6 fw-bold mb-0">@ProgressoNovo%</p>
          <small>@LidosNovo/@TotalNovo capítulos</small>
        </div>
      </div>
    </div>
  </div>

  <!-- Livros -->
  <div class="row g-3">
    @foreach (var livro in BibliaData.Livros)
    {
      <div class="col-12 col-md-6 col-lg-4">
        <div class="@CardClass(livro)" @onclick="() => AbrirLivro(livro)">
          <div class="card-body d-flex flex-column justify-content-between text-center">
            <h6 class="mb-2 align-content-center text-center">@livro.Nome <label style="@BadgeStyleColor(livro)">@livro.Testamento.Substring(0,1)T </label> </h6>

            <div class="mt-1">
              <div class="progress" role="progressbar" aria-label="Progresso do livro">
                <div class="progress-bar" style="width:@CalcularPercentual(livro)%">
                  @CalcularPercentual(livro)%
                </div>
              </div>
              <small>@LidosLivro(livro)/@livro.Capitulos caps</small>
            </div>
          </div>
        </div>
      </div>
    }
  </div>
</div>

@if (LivroSelecionado is not null)
{
  <LivroModal Livro="LivroSelecionado"
              Progresso="Progresso"
              OnSalvar="SalvarLivro"
              OnFechar="FecharModal" />
}

@code {
  private Dictionary<string, List<int>> Progresso = new();
  private Livro? LivroSelecionado;

  // Resumos
  private int ProgressoBiblia, ProgressoVelho, ProgressoNovo;
  private int TotalCapitulos, TotalVelho, TotalNovo;
  private int LidosTotais, LidosVelho, LidosNovo;
  
  private string CardClass(Livro l)
    => $"card card-plain clickable h-100 {(l.Testamento == "Velho" ? "bg-ot" : "bg-nt")}";

  private string BadgeStyleColor(Livro l) =>
    $"background-color: {(l.Testamento == "Velho" ? "#0f5132" : "#6f42c1")}; ; border-radius: 3px; color: white; font-size: 60%; padding: 3px";

  protected override async Task OnInitializedAsync()
  {
    Progresso = await ProgressoService.CarregarAsync();
    AtualizarProgresso();
  }

  private void AbrirLivro(Livro livro) => LivroSelecionado = livro;
  private void FecharModal() => LivroSelecionado = null;

  private int LidosLivro(Livro livro)
    => Progresso.TryGetValue(livro.Nome, out var lidos) ? lidos.Count : 0;

  private int CalcularPercentual(Livro livro)
  {
    var lidos = LidosLivro(livro);
    return livro.Capitulos == 0 ? 0 : (int)Math.Round((double)lidos / livro.Capitulos * 100);
  }

  private async Task SalvarLivro(List<int> capitulos)
  {
    var nome = LivroSelecionado!.Nome;
    Progresso[nome] = capitulos;
    await ProgressoService.SalvarAsync(Progresso);
    AtualizarProgresso();
    LivroSelecionado = null;
  }

  private void AtualizarProgresso()
  {
    var livros = BibliaData.Livros;

    TotalCapitulos = livros.Sum(l => l.Capitulos);
    TotalVelho     = livros.Where(l => l.Testamento == "Velho").Sum(l => l.Capitulos);
    TotalNovo      = livros.Where(l => l.Testamento == "Novo").Sum(l => l.Capitulos);

    LidosTotais = Progresso.Sum(p => p.Value.Count);
    LidosVelho  = livros.Where(l => l.Testamento == "Velho").Sum(l => LidosLivro(l));
    LidosNovo   = livros.Where(l => l.Testamento == "Novo").Sum(l => LidosLivro(l));

    ProgressoBiblia = TotalCapitulos == 0 ? 0 : (int)Math.Round((double)LidosTotais / TotalCapitulos * 100);
    ProgressoVelho  = TotalVelho     == 0 ? 0 : (int)Math.Round((double)LidosVelho  / TotalVelho     * 100);
    ProgressoNovo   = TotalNovo      == 0 ? 0 : (int)Math.Round((double)LidosNovo   / TotalNovo      * 100);
  }
}
