@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Biblia.Data
@inject Biblia.Services.ProgressoService ProgressoService
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<PageTitle>Leitura da Bíblia</PageTitle>

<button id="btnInstall" class="btn btn-outline-primary d-none">Instalar app</button>

<div class="container" style="max-width: 700px">
  <div class="container justify-content-center text-center">
    <img src="logo.png" style="width: 350px" alt="Jornada Bíblica" />  
  </div>

  <div class="container text-center">
    <h6 style="font-size: 85%; padding: 3px; margin: 5px">Use este app para marcar seu progresso na leitura da Bíblia Sagrada. Que Deus te abençoe em sua jornada de leitura e conhecimento da palavra!</h6>
  </div>

  <!-- Resumos -->
  <!-- Totais (um card + tabela) -->
  <div class="row g-3 mb-3">
    <div class="col-12">
      <div class="card card-plain">
        <div class="card-body p-2">
          <table class="table table-sm mb-0 align-middle">
            <tbody>
            <tr>
              <td class="w-50"><strong>Velho Testamento</strong></td>
              <td class="text-end">@LidosVelho/@TotalVelho caps</td>
              <td class="text-end">
                <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(LidosVelho, TotalVelho)">
                  @ProgressoVelho%
                </span>
                @* alternativa sem cor: <span class="badge rounded-pill bg-dark text-white fw-semibold">@ProgressoVelho%</span> *@
              </td>
            </tr>
            <tr>
              <td class="w-50"><strong>Novo Testamento</strong></td>
              <td class="text-end">@LidosNovo/@TotalNovo caps</td>
              <td class="text-end">
                <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(LidosNovo, TotalNovo)">
                  @ProgressoNovo%
                </span>
                @* alternativa sem cor: <span class="badge rounded-pill bg-dark text-white fw-semibold">@ProgressoNovo%</span> *@
              </td>
            </tr>
            <tr>
              <td class="w-50"><strong>Bíblia inteira</strong></td>
              <td class="text-end">@LidosTotais/@TotalCapitulos caps</td>
              <td class="text-end">
                <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(LidosTotais, TotalCapitulos)">
                  @ProgressoBiblia%
                </span>
                @* alternativa sem cor: <span class="badge rounded-pill bg-dark text-white fw-semibold">@ProgressoBiblia%</span> *@
              </td>
            </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Meta de Conclusão -->
  <div class="row g-3 mb-3">
    <div class="col-12">
      <div class="card card-plain">
        <div class="card-body p-2">
          @if (PrazoFinal is null)
          {
            <h5 class="mb-2">Meta de Conclusão</h5>

            <table class="table table-sm mb-0 align-middle no-last-divider">
              <tbody>
              <tr>
                <td class="text-muted">
                  <small>
                    Você pode definir uma data para terminar de ler toda a Bíblia.
                    Assim calculamos quantos capítulos por dia você precisa ler para cumprir sua meta.
                  </small>
                </td>
                <td class="text-end">
                  <span class="badge rounded-pill bg-primary text-white pct-badge badge-action"
                        @onclick="AbrirPlanner">
                    Definir
                  </span>
                </td>
              </tr>
              </tbody>
            </table>
          }
          else
          {
            <h5 class="mb-2">Meta de Conclusão</h5>

            <table class="table table-sm mb-0 align-middle no-last-divider">
              <tbody>
              <tr>
                <td class="w-50">
                  <small class="text-muted">Até @PrazoFinal!.Value.ToString("dd/MM/yyyy") (@(IncluirHoje ? "contando hoje" : "a partir de amanhã"))</small>
                </td>
                <td class="text-end">
                  <span class="badge rounded-pill bg-secondary text-white pct-badge badge-action"
                        @onclick="AbrirPlanner">
                    Editar
                  </span>
                </td>
              </tr>
              <tr>
                <td>Capítulos restantes</td>
                <td class="text-end">
                  <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(TotalCapitulos - CapitulosRestantes, TotalCapitulos)">
                    @CapitulosRestantes
                  </span>
                </td>
              </tr>
              <tr>
                <td>Dias disponíveis</td>
                <td class="text-end">
                  <span class="badge rounded-pill bg-dark text-white pct-badge">@DiasRestantes</span>
                </td>
              </tr>
              <tr>
                <td>Leitura diária necessária</td>
                <td class="text-end">
                  <span class="badge rounded-pill bg-dark text-white pct-badge">@CapsPorDia Caps/Dia</span>
                </td>
              </tr>
              </tbody>
            </table>
          }
        </div>
      </div>
    </div>
  </div>


  <div class="btn-group w-100 mb-3" role="group" aria-label="Filtro de livros">
    <input type="radio" class="btn-check" name="filtroLivros" id="fltTodos"
           checked="@IsFiltro(FiltroLivros.Todos)"
           @onchange="async _ => await SetFiltroAsync(FiltroLivros.Todos)">
    <label class="btn btn-outline-secondary flex-fill" for="fltTodos">Todos</label>

    <input type="radio" class="btn-check" name="filtroLivros" id="fltLidos"
           checked="@IsFiltro(FiltroLivros.Lidos)"
           @onchange="async _ => await SetFiltroAsync(FiltroLivros.Lidos)">
    <label class="btn btn-outline-secondary flex-fill" for="fltLidos">Lidos</label>

    <input type="radio" class="btn-check" name="filtroLivros" id="fltNaoLidos"
           checked="@IsFiltro(FiltroLivros.NaoLidos)"
           @onchange="async _ => await SetFiltroAsync(FiltroLivros.NaoLidos)">
    <label class="btn btn-outline-secondary flex-fill" for="fltNaoLidos">Não lidos</label>
  </div>

  <!-- Livros -->
  <!-- Velho Testamento -->
  <div class="row g-3 mb-3">
    <div class="col-12">
      <div class="card card-plain">
        <div class="card-body p-2">
          <h5 class="mb-2">Velho Testamento</h5>
          <table class="table table-sm table-hover mb-0 align-middle">
            <tbody>
            @foreach (var livro in BibliaData.Livros
                        .Where(l => l.Testamento == "Velho")
                        .Where(PassaFiltroLivro))
            {
              var lidos = LidosLivro(livro);
              <tr @onclick="() => AbrirLivro(livro)">
                <td class="w-50">@livro.Nome</td>
                <td class="text-end">@lidos/@livro.Capitulos caps</td>
                <td class="text-end">
                  <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(lidos, livro.Capitulos)">
                    @CalcularPercentual(livro)%
                  </span>
                  @* se quiser colorir por testamento, pode usar badge-ot aqui *@
                </td>
              </tr>
            }
            @if (!BibliaData.Livros.Any(l => l.Testamento == "Velho" && PassaFiltroLivro(l)))
            {
              <tr><td colspan="3" class="text-center text-muted">Nenhum livro neste filtro.</td></tr>
            }
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Novo Testamento -->
  <div class="row g-3 mb-3">
    <div class="col-12">
      <div class="card card-plain">
        <div class="card-body p-2">
          <h5 class="mb-2">Novo Testamento</h5>
          <table class="table table-sm table-hover mb-0 align-middle">
            <tbody>
            @foreach (var livro in BibliaData.Livros
                        .Where(l => l.Testamento == "Novo")
                        .Where(PassaFiltroLivro))
            {
              var lidos = LidosLivro(livro);
              <tr @onclick="() => AbrirLivro(livro)">
                <td class="w-50">@livro.Nome</td>
                <td class="text-end">@lidos/@livro.Capitulos caps</td>
                <td class="text-end">
                  <span class="badge rounded-pill pct-badge @BadgeClassFromCounts(lidos, livro.Capitulos)">
                    @CalcularPercentual(livro)%
                  </span>
                  @* se quiser colorir por testamento, pode usar badge-nt aqui *@
                </td>
              </tr>
            }
            @if (!BibliaData.Livros.Any(l => l.Testamento == "Novo" && PassaFiltroLivro(l)))
            {
              <tr>
                <td colspan="3" class="text-center text-muted">Nenhum livro neste filtro.</td>
              </tr>
            }
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<br/>

<div class="container text-center">
  <a href="privacidade" class="link-secondary">Privacidade</a>
</div>

<br/>

<div class="container text-center">
  <label style="background-color: #26b050; border-radius: 10px; color: white; font-size: 75%; padding: 6px; margin: 6px" >@contador visitas</label>
</div>

<br/>

<div class="container text-center align-middle">
  <h6>"O temor do Senhor é o princípio da sabedoria, e o conhecimento do Santo é entendimento" (Provérbios 9:10)</h6>  
</div>

<footer class="border-top mt-4">
  <div class="container py-3 d-flex flex-column flex-sm-row align-items-center justify-content-between gap-2 text-body-secondary">
    <div class="text-center text-sm-start">
      <small>
        &copy; @DateTime.Now.Year <strong>Jornada Bíblica</strong> — desenvolvido por
        <a class="link-secondary" href="mailto:fredericocalico@gmail.com">Antonio Frederico</a>
        <span class="ms-2">v1.0.0</span> @* troque pela sua versão *@
      </small>
    </div>

    <ul class="list-inline mb-0">
      <li class="list-inline-item">
        <a class="link-secondary" href="mailto:fredericocalico@gmail.com" aria-label="Enviar email">
          <i class="fa-solid fa-at fs-5"></i><span class="visually-hidden">Email</span>
        </a>
      </li>
      <li class="list-inline-item">
        <a class="link-secondary" href="https://www.instagram.com/antoniofrederico17/" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
          <i class="fa-brands fa-instagram fs-5"></i><span class="visually-hidden">Instagram</span>
        </a>
      </li>
      @* Opcional: link do repositório *@
       <li class="list-inline-item">
           <a class="link-secondary" href="https://github.com/fredericocalico/LeituraBiblia" target="_blank" rel="noopener noreferrer" aria-label="GitHub">
             <i class="fa-brands fa-github fs-5"></i><span class="visually-hidden">GitHub</span>
           </a>
         </li> 
    </ul>
  </div>
</footer>



@if (LivroSelecionado is not null)
{
  <LivroModal Livro="LivroSelecionado"
              Progresso="Progresso"
              OnSalvar="SalvarLivro"
              OnFechar="FecharModal" />
}

@if (PlannerAberto)
{
  <PlannerModal PrazoInicial="PrazoFinal"
                ContarHojeInicial="IncluirHoje"
                OnSalvar="SalvarPlanner"
                OnFechar="FecharPlanner" />
}

<style>
  tr {
    line-height: 2.3;
  }

  .table > :not(caption) > *:last-child > * {
    border-bottom-width: 0 !important;
  }

  .no-last-divider > :not(caption) > *:last-child > * {
    border-bottom-width: 0 !important;
  }

  /* aumenta só o badge da última coluna das tabelas */
  .table td:last-child .badge{
    font-size: .95rem;      /* maior que o padrão */
    padding: .40rem .70rem; /* mais “gordinho” */
    line-height: 1;         /* evita esticar verticalmente */
  }

  /* mantém a coluna do badge compacta e sem quebra de linha */
  .table td:last-child{
    white-space: nowrap;
    width: 1%;
  }
</style>

@code {
  private Dictionary<string, List<int>> Progresso = new();
  private Livro? LivroSelecionado;
  private int contador = 0;
  private bool cardPlannerIsOpen { get; set; } = false;

  // Resumos
  private int ProgressoBiblia, ProgressoVelho, ProgressoNovo;
  private int TotalCapitulos, TotalVelho, TotalNovo;
  private int LidosTotais, LidosVelho, LidosNovo;
  
  // Planejador
  private DateTime? PrazoFinal;
  private bool IncluirHoje = true;
  private int CapitulosRestantes, DiasRestantes, CapsPorDia;
  
  // Modal do planner
  private bool PlannerAberto = false;
  private void AbrirPlanner() => PlannerAberto = true;
  private void FecharPlanner() => PlannerAberto = false;
  
  private enum FiltroLivros { Todos, Lidos, NaoLidos }
  private FiltroLivros FiltroAtual = FiltroLivros.Todos;

  private string BadgeClassFromCounts(int lidos, int total)
  {
    if (total <= 0) return "badge-0";
    if (lidos <= 0) return "badge-0";
    if (lidos >= total) return "badge-done";
    return "badge-progress";
  }

  // Handler do modal
  private async Task SalvarPlanner(PlannerModal.PlannerConfig cfg)
  {
    if (cfg.Remover)
    {
      PrazoFinal = null;
      await JS.InvokeVoidAsync("localStorage.removeItem", "planner_deadline");
      // manter preferência "contar hoje" se quiser
      await JS.InvokeVoidAsync("localStorage.setItem", "planner_include_today", cfg.IncluirHoje ? "true" : "false");
    }
    else
    {
      PrazoFinal = cfg.PrazoFinal?.Date;
      IncluirHoje = cfg.IncluirHoje;
      if (PrazoFinal is not null)
        await JS.InvokeVoidAsync("localStorage.setItem", "planner_deadline", PrazoFinal!.Value.ToString("yyyy-MM-dd"));
      await JS.InvokeVoidAsync("localStorage.setItem", "planner_include_today", IncluirHoje ? "true" : "false");
    }

    RecalcularPlanner();
    PlannerAberto = false;
  }
  
  private bool PassaFiltroLivro(Livro l)
  {
    var lidos = LidosLivro(l);
    return FiltroAtual switch
    {
      FiltroLivros.Todos    => true,
      FiltroLivros.Lidos    => lidos == l.Capitulos, // 100% lido
      FiltroLivros.NaoLidos => lidos <  l.Capitulos, // 0% ou em andamento
      _ => true
    };
  }

  private bool IsFiltro(FiltroLivros f) => FiltroAtual == f;

  private async Task SetFiltroAsync(FiltroLivros f)
  {
    FiltroAtual = f;
    var key = f switch
    {
      FiltroLivros.Lidos    => "lidos",
      FiltroLivros.NaoLidos => "naolidos",
      _                     => "todos"
    };
    await JS.InvokeVoidAsync("localStorage.setItem", "filter_view", key);
  }

  private async Task CarregarFiltroAsync()
  {
    var s = await JS.InvokeAsync<string>("localStorage.getItem", "filter_view");
    FiltroAtual = s?.ToLowerInvariant() switch
    {
      "lidos"    => FiltroLivros.Lidos,
      "naolidos" => FiltroLivros.NaoLidos,
      _          => FiltroLivros.Todos
    };
  }

 protected override async Task OnInitializedAsync()
  {
    Progresso = await ProgressoService.CarregarAsync();
    AtualizarProgresso();
    await CarregarPlannerAsync();
    await CarregarFiltroAsync();   
    await AtualizarContador();
  }

  private void AbrirLivro(Livro livro) => LivroSelecionado = livro;
  private void FecharModal() => LivroSelecionado = null;

  private int LidosLivro(Livro livro)
    => Progresso.TryGetValue(livro.Nome, out var lidos) ? lidos.Count : 0;

  private int CalcularPercentual(Livro livro)
  {
    var lidos = LidosLivro(livro);
    return livro.Capitulos == 0 ? 0 : (int)Math.Round((double)lidos / livro.Capitulos * 100);
  }

  private async Task SalvarLivro(List<int> capitulos)
  {
    var nome = LivroSelecionado!.Nome;
    Progresso[nome] = capitulos;
    await ProgressoService.SalvarAsync(Progresso);
    AtualizarProgresso();
    LivroSelecionado = null;
  }

  // sempre que atualizar totais (ex.: ao salvar capítulos) recalcule também o planner
  private void AtualizarProgresso()
  {
    var livros = BibliaData.Livros;

    TotalCapitulos = livros.Sum(l => l.Capitulos);
    TotalVelho     = livros.Where(l => l.Testamento == "Velho").Sum(l => l.Capitulos);
    TotalNovo      = livros.Where(l => l.Testamento == "Novo").Sum(l => l.Capitulos);

    LidosTotais = Progresso.Sum(p => p.Value.Count);
    LidosVelho  = livros.Where(l => l.Testamento == "Velho").Sum(l => LidosLivro(l));
    LidosNovo   = livros.Where(l => l.Testamento == "Novo").Sum(l => LidosLivro(l));

    ProgressoBiblia = TotalCapitulos == 0 ? 0 : (int)Math.Round((double)LidosTotais / TotalCapitulos * 100);
    ProgressoVelho  = TotalVelho     == 0 ? 0 : (int)Math.Round((double)LidosVelho  / TotalVelho     * 100);
    ProgressoNovo   = TotalNovo      == 0 ? 0 : (int)Math.Round((double)LidosNovo   / TotalNovo      * 100);

    RecalcularPlanner();
  }
  
  private async Task CarregarPlannerAsync()
  {
    var s = await JS.InvokeAsync<string>("localStorage.getItem", "planner_deadline");
    if (!string.IsNullOrWhiteSpace(s) && DateTime.TryParse(s, out var d))
      PrazoFinal = d.Date;

    var inc = await JS.InvokeAsync<string>("localStorage.getItem", "planner_include_today");
    if (!string.IsNullOrWhiteSpace(inc))
      IncluirHoje = inc == "true";

    RecalcularPlanner();
  }
  
  private async Task SalvarPrazo()
  {
    if (PrazoFinal is not null)
      await JS.InvokeVoidAsync("localStorage.setItem", "planner_deadline", PrazoFinal!.Value.ToString("yyyy-MM-dd"));
    await JS.InvokeVoidAsync("localStorage.setItem", "planner_include_today", IncluirHoje ? "true" : "false");
    RecalcularPlanner();
  }

  private void RecalcularPlanner()
  {
    CapitulosRestantes = Math.Max(0, TotalCapitulos - LidosTotais);

    if (PrazoFinal is null)
    {
      DiasRestantes = 0;
      CapsPorDia = 0;
      return;
    }

    var hoje = DateTime.Today;
    var fim  = PrazoFinal.Value.Date;

    // se "Contar hoje" estiver ligado, incluímos o dia de hoje no total de dias
    var dias = (fim - hoje).Days + (IncluirHoje ? 1 : 0);
    DiasRestantes = Math.Max(0, dias);

    CapsPorDia = (DiasRestantes <= 0 || CapitulosRestantes <= 0)
      ? 0
      : (int)Math.Ceiling((double)CapitulosRestantes / DiasRestantes);
  }
  
  
  private async Task AtualizarContador()
  {
    try
    {
      var apiUrl = "https://api.counterapi.dev/v2/projects/jornada/up";

      var response = await Http.GetAsync(apiUrl);

      if (response.IsSuccessStatusCode)
      {
        var responseContent = await response.Content.ReadAsStringAsync();
                
        // Desserializar o JSON e extrair o valor
        var jsonResponse = JsonSerializer.Deserialize<CounterResponse>(responseContent);
        contador = (jsonResponse?.Data.UpCount ?? 0);
      }
      else
      {
        Console.WriteLine($"Erro ao executar api do contador: {response.Headers.ToString()}");
        contador = 1000; 
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Erro ao executar api do contador: {ex.Message}");
      contador = 1000; 
    }
  }
  
  public sealed class CounterResponse
  {
    [JsonPropertyName("code")]
    [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
    public int Code { get; set; }

    [JsonPropertyName("data")]
    public CounterData Data { get; set; } = default!;

    [JsonPropertyName("message")]
    public string Message { get; set; } = "";
  }

  public sealed class CounterData
  {
    [JsonPropertyName("created_at")]
    public DateTimeOffset CreatedAt { get; set; }

    [JsonPropertyName("description")]
    public string Description { get; set; } = "";

    [JsonPropertyName("down_count")]
    public int DownCount { get; set; }

    [JsonPropertyName("id")]
    public int Id { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; } = "";

    [JsonPropertyName("slug")]
    public string Slug { get; set; } = "";

    [JsonPropertyName("team_id")]
    public int TeamId { get; set; }

    [JsonPropertyName("up_count")]
    public int UpCount { get; set; }

    [JsonPropertyName("updated_at")]
    public DateTimeOffset UpdatedAt { get; set; }

    [JsonPropertyName("user_id")]
    public int UserId { get; set; }

    [JsonPropertyName("workspace_id")]
    public int WorkspaceId { get; set; }

    [JsonPropertyName("workspace_slug")]
    public string WorkspaceSlug { get; set; } = "";
  }
  
}
