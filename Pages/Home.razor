@page "/"
@using System.Text.Json
@using Biblia.Data
@inject Biblia.Services.ProgressoService ProgressoService
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<PageTitle>Leitura da Bíblia</PageTitle>

<div class="container py-3" style="max-width: 700px">
  <h3 class="text-center mb-4"><img src="icons/icon-192.png" style="width: 50px"/> Controle de Leitura</h3>
  
  <div class="container text-center" >
    <h6 style="font-size: 85%; padding: 3px; margin: 5px">Use este app para marcar seu progresso na leitura da Bíblia Sagrada. Que Deus te abençoe em sua jornada de leitura e conhecimento da palavra!</h6>  
  </div>

  <!-- Resumos -->
  <div class="row g-3 mb-3">
    
    <div class="col-4 col-md-4">
      <div class="card card-plain text-center bg-ot">
        <div class="card-body">
          <h6 class="card-title">Velho Test</h6>
          <p class="display-6 fw-bold mb-0">@ProgressoVelho%</p>
          <small>@LidosVelho/@TotalVelho cap</small>
        </div>
      </div>
    </div>

    <div class="col-4 col-md-4">
      <div class="card card-plain text-center bg-nt">
        <div class="card-body">
          <h6 class="card-title">Novo Test</h6>
          <p class="display-6 fw-bold mb-0">@ProgressoNovo%</p>
          <small>@LidosNovo/@TotalNovo cap</small>
        </div>
      </div>
    </div>
    
    <div class="col-4 col-md-4">
      <div class="card card-plain text-center bg-total">
        <div class="card-body">
          <h6 class="card-title">Bíblia inteira</h6>
          <p class="display-6 fw-bold mb-0">@ProgressoBiblia%</p>
          <small>@LidosTotais/@TotalCapitulos cap</small>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Card de planejamento -->
  <div class="row g-3 mb-3">
    <div class="col-12">
      <div class="card card-plain bg-total">
        <div class="card-body">
          <div>
            <div class="row">
              <div class="col-10">
                <h5>Meta de Conclusão</h5>
              </div>
              <div class="col-2 text-end align-content-end">
                @if (cardPlannerIsOpen)
                {
                  <i class="fa-solid fa-circle-arrow-up fs-2" style="color: #b3b1b2" @onclick="(() => ToogleCardPlanner())"></i>  
                }
                else
                {
                  <i class="fa-solid fa-circle-arrow-down fs-2" style="color: #b3b1b2" @onclick="(() => ToogleCardPlanner())"></i>
                }
              </div>
            </div>

            @if (cardPlannerIsOpen || ( PrazoFinal is null && !cardPlannerIsOpen ))
            {
              <div class="container text-center mb-2">
                <small>Defina uma data limite para concluir a leitura da Bíblia</small>
              </div>
            }

            @if (cardPlannerIsOpen)
            {
              <div class="d-flex align-items-center justify-content-center g-2">
                <div style="min-width:220px; padding-right: 10px">
                  <InputDate @bind-Value="PrazoFinal" class="form-control"/>
                </div>
                <button class="btn btn-primary" @onclick="SalvarPrazo">Salvar</button>
              </div>
              <div class="form-check form-switch m-2">
                <input class="form-check-input" type="checkbox" id="incHoje" @bind="IncluirHoje"/>
                <label class="form-check-label" for="incHoje">Contar hoje</label>
              </div>
            }
          </div>

          <div class="mt-3">
            @if (PrazoFinal is null)
            {
              <small>Escolha uma data para ver a leitura diária necessária.</small>
            }
            else if (PrazoFinal!.Value.Date < DateTime.Today)
            {
              <small class="text-danger"><strong>Atenção:</strong> o prazo escolhido já passou.</small>
            }
            else
            {
              <div class="d-flex flex-wrap gap-3 text-center align-items-center justify-content-center">
                @if (cardPlannerIsOpen)
                {
                  <span><strong>Capítulos restantes:</strong> @CapitulosRestantes</span>
                  <span><strong>Dias disponíveis:</strong> @DiasRestantes</span>
                } 
                <span style="background-color: #26b050; border-radius: 19px; padding: 8px"><strong>Leitura diária necessária:</strong> @CapsPorDia Cap/Dia</span>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Livros -->
  <div class="row g-3">
    @foreach (var livro in BibliaData.Livros)
    {
      <div class="col-12 col-md-6 col-lg-4">
        <div class="@CardClass(livro)" @onclick="() => AbrirLivro(livro)">
          <div class="card-body d-flex flex-column justify-content-between text-center align-middle">
            <h6 class="mb-2 align-content-center text-center">@livro.Nome <label style="@BadgeStyleColor(livro)">@livro.Testamento.Substring(0,1)T </label> </h6>

            <div class="mt-1">
              <div class="progress" role="progressbar" aria-label="Progresso do livro">
                <div class="progress-bar" style="width:@CalcularPercentual(livro)%">
                  @CalcularPercentual(livro)%
                </div>
              </div>
              <small>@LidosLivro(livro)/@livro.Capitulos caps</small>
            </div>
          </div>
        </div>
      </div>
    }
  </div>
</div>

<br/>

<div class="container text-center">
  <label style="background-color: #26b050; border-radius: 10px; font-size: 75%; padding: 6px; margin: 6px" >@contador visitas desde 28/08/2025</label>
</div>

<br/>

<div class="container text-center">
  <label style="font-size: 80%">Desenvolvido por Antonio Frederico | <a href="mailto:fredericocalico@gmail.com">Envie-me um e-mail</a></label>
</div>

<br/>

@if (LivroSelecionado is not null)
{
  <LivroModal Livro="LivroSelecionado"
              Progresso="Progresso"
              OnSalvar="SalvarLivro"
              OnFechar="FecharModal" />
}

@code {
  private Dictionary<string, List<int>> Progresso = new();
  private Livro? LivroSelecionado;
  private int contador = 0;
  private bool cardPlannerIsOpen { get; set; } = false;

  // Resumos
  private int ProgressoBiblia, ProgressoVelho, ProgressoNovo;
  private int TotalCapitulos, TotalVelho, TotalNovo;
  private int LidosTotais, LidosVelho, LidosNovo;
  
  // Planejador
  private DateTime? PrazoFinal;
  private bool IncluirHoje = true;
  private int CapitulosRestantes, DiasRestantes, CapsPorDia;
  
  private string CardClass(Livro l)
    => $"card card-plain clickable h-100 {(l.Testamento == "Velho" ? "bg-ot" : "bg-nt")}";

  private string BadgeStyleColor(Livro l) =>
    $"background-color: {(l.Testamento == "Velho" ? "#0f5132" : "#6f42c1")}; ; border-radius: 3px; color: white; font-size: 70%; padding: 3px";

  private void ToogleCardPlanner() => cardPlannerIsOpen = (!cardPlannerIsOpen);
  
  protected override async Task OnInitializedAsync()
  {
    
    Progresso = await ProgressoService.CarregarAsync();
    AtualizarProgresso();          // já computa totais
    await CarregarPlannerAsync();  // carrega prazo + incluirHoje do localStorage
    
    Progresso = await ProgressoService.CarregarAsync();
    AtualizarProgresso();
    await AtualizarContador();
  }

  private void AbrirLivro(Livro livro) => LivroSelecionado = livro;
  private void FecharModal() => LivroSelecionado = null;

  private int LidosLivro(Livro livro)
    => Progresso.TryGetValue(livro.Nome, out var lidos) ? lidos.Count : 0;

  private int CalcularPercentual(Livro livro)
  {
    var lidos = LidosLivro(livro);
    return livro.Capitulos == 0 ? 0 : (int)Math.Round((double)lidos / livro.Capitulos * 100);
  }

  private async Task SalvarLivro(List<int> capitulos)
  {
    var nome = LivroSelecionado!.Nome;
    Progresso[nome] = capitulos;
    await ProgressoService.SalvarAsync(Progresso);
    AtualizarProgresso();
    LivroSelecionado = null;
  }

  // sempre que atualizar totais (ex.: ao salvar capítulos) recalcule também o planner
  private void AtualizarProgresso()
  {
    var livros = BibliaData.Livros;

    TotalCapitulos = livros.Sum(l => l.Capitulos);
    TotalVelho     = livros.Where(l => l.Testamento == "Velho").Sum(l => l.Capitulos);
    TotalNovo      = livros.Where(l => l.Testamento == "Novo").Sum(l => l.Capitulos);

    LidosTotais = Progresso.Sum(p => p.Value.Count);
    LidosVelho  = livros.Where(l => l.Testamento == "Velho").Sum(l => LidosLivro(l));
    LidosNovo   = livros.Where(l => l.Testamento == "Novo").Sum(l => LidosLivro(l));

    ProgressoBiblia = TotalCapitulos == 0 ? 0 : (int)Math.Round((double)LidosTotais / TotalCapitulos * 100);
    ProgressoVelho  = TotalVelho     == 0 ? 0 : (int)Math.Round((double)LidosVelho  / TotalVelho     * 100);
    ProgressoNovo   = TotalNovo      == 0 ? 0 : (int)Math.Round((double)LidosNovo   / TotalNovo      * 100);

    RecalcularPlanner();
  }
  
  private async Task AtualizarContador()
  {
    try
    {
      var apiUrl = "https://api.api-ninjas.com/v1/counter?id=biblia&hit=true";
      Http.DefaultRequestHeaders.Add("X-Api-Key", "HcNlcFpPkN6svuNN4tshqQ==5rcO32X3qCgbJYjh"); 

      var response = await Http.GetAsync(apiUrl);

      if (response.IsSuccessStatusCode)
      {
        var responseContent = await response.Content.ReadAsStringAsync();
                
        // Desserializar o JSON e extrair o valor
        var jsonResponse = JsonSerializer.Deserialize<ApiResponse>(responseContent);
        contador = jsonResponse?.value ?? -1;
      }
      else
      {
        contador = -1; 
      }
    }
    catch
    {
      contador = -1; 
    }
  }
  
  

  private async Task CarregarPlannerAsync()
  {
    var s = await JS.InvokeAsync<string>("localStorage.getItem", "planner_deadline");
    if (!string.IsNullOrWhiteSpace(s) && DateTime.TryParse(s, out var d))
      PrazoFinal = d.Date;

    var inc = await JS.InvokeAsync<string>("localStorage.getItem", "planner_include_today");
    if (!string.IsNullOrWhiteSpace(inc))
      IncluirHoje = inc == "true";

    RecalcularPlanner();
  }
  
  private async Task SalvarPrazo()
  {
    if (PrazoFinal is not null)
      await JS.InvokeVoidAsync("localStorage.setItem", "planner_deadline", PrazoFinal!.Value.ToString("yyyy-MM-dd"));
    await JS.InvokeVoidAsync("localStorage.setItem", "planner_include_today", IncluirHoje ? "true" : "false");
    RecalcularPlanner();
  }

  private void RecalcularPlanner()
  {
    CapitulosRestantes = Math.Max(0, TotalCapitulos - LidosTotais);

    if (PrazoFinal is null)
    {
      DiasRestantes = 0;
      CapsPorDia = 0;
      return;
    }

    var hoje = DateTime.Today;
    var fim  = PrazoFinal.Value.Date;

    // se "Contar hoje" estiver ligado, incluímos o dia de hoje no total de dias
    var dias = (fim - hoje).Days + (IncluirHoje ? 1 : 0);
    DiasRestantes = Math.Max(0, dias);

    CapsPorDia = (DiasRestantes <= 0 || CapitulosRestantes <= 0)
      ? 0
      : (int)Math.Ceiling((double)CapitulosRestantes / DiasRestantes);
  }
  
  private class ApiResponse
  {
    public string? id { get; set; }
    public int? value { get; set; }
  }
  
}
